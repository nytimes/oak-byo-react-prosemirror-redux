(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{3538:function(e,r,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return o(3272)}])},3272:function(e,r,o){"use strict";o.r(r),o.d(r,{default:function(){return s}});var t=o(1874),i=o(8535),n=o.n(i);function s(){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n(),{children:(0,t.jsx)("title",{children:"Build Your Own: React, ProseMirror, and Redux"})}),(0,t.jsxs)("main",{children:[(0,t.jsx)("header",{children:(0,t.jsx)("h1",{children:"Build Your Own: React, ProseMirror, and Redux"})}),(0,t.jsx)("p",{children:"This course was originally designed as a two-week learning sprint to be taken on by the Oak team at the New York Times. The goal of this course is to actually build minimal alternatives to each of the three primary frontend libraries we use in Oak, our collaborative rich text editor."}),(0,t.jsx)("p",{children:"We'll start with Redux! There's only one Redux course; we're going to dive right in by building our own Redux implementation from scratch."}),(0,t.jsx)("ol",{children:(0,t.jsxs)("li",{children:["Build our own Redux -"," ",(0,t.jsx)("a",{href:"post/build-your-own-redux/",children:"Course"})," :"," ",(0,t.jsx)("a",{href:"https://glitch.com/edit/#!/oak-pm-react-week-build-your-own-redux",rel:"noopener noreferrer",children:"Glitch"})]})}),(0,t.jsx)("p",{children:"Next, we're going to tackle React. We have two React courses:"}),(0,t.jsxs)("ol",{children:[(0,t.jsxs)("li",{children:["React Basics - ",(0,t.jsx)("a",{href:"post/react-basics/",children:"Course"})," :"," ",(0,t.jsx)("a",{href:"https://glitch.com/edit/#!/oak-pm-react-week-react-basics",rel:"noopener noreferrer",children:"Glitch"})]}),(0,t.jsxs)("li",{children:["Build your own React -"," ",(0,t.jsx)("a",{href:"https://pomb.us/build-your-own-react/",rel:"noopener noreferrer",children:"Course"})," ",":"," ",(0,t.jsx)("a",{href:"https://glitch.com/edit/#!/oak-pm-react-week-build-your-own-react",rel:"noopener noreferrer",children:"Glitch"})]})]}),(0,t.jsx)("p",{children:"And finally, ProseMirror. Again, we have two ProseMirror courses, a refresher and a deep dive:"}),(0,t.jsxs)("ol",{children:[(0,t.jsxs)("li",{children:["ProseMirror Basics - ",(0,t.jsx)("a",{href:"post/prosemirror-basics/",children:"Course"})," :"," ",(0,t.jsx)("a",{href:"https://glitch.com/edit/#!/oak-pm-react-week-prosemirror-basics",rel:"noopener noreferrer",children:"Glitch"})]}),(0,t.jsxs)("li",{children:["Build your own ProseMirror View -"," ",(0,t.jsx)("a",{href:"post/build-your-own-pm-view/",children:"Course"})," :"," ",(0,t.jsx)("a",{href:"https://glitch.com/edit/#!/oak-pm-react-week-build-your-own-pm-view",rel:"noopener noreferrer",children:"Glitch"})]})]}),(0,t.jsx)("h2",{children:"Why should I bother learning how to build my own...?"}),(0,t.jsx)("p",{children:"Abstraction is one of the most valuable tools in a software developer’s toolbelt. It is fundamental to our craft; from machine code to DOM APIs, software is built on a massive system of abstraction. But sometimes abstractions leak, or conflict. What do we do when we need to peel back the abstraction and truly understand what’s happening under the hood? How do we best understand what our tools actually do?"}),(0,t.jsx)("p",{children:"The Oak team collected and developed these resources to help us prepare to reimagine the way we integrated React, ProseMirror, and Redux in our codebase. Because React and ProseMirror have different philosophies about DOM management, and Redux and ProseMirror have different philosophies about state management, it was important that we understood deeply how each of them actually worked in order to build a system that allowed them to cooperate."})]})]})}},8535:function(e,r,o){e.exports=o(3219)}},function(e){e.O(0,[774,888,179],function(){return e(e.s=3538)}),_N_E=e.O()}]);